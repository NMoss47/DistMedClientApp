/*
 * Copyright 2017 Nicholas Moss
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to    
 * deal in the Software without restriction, including without limitation the  
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom the Software is   
 * furnishedto do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in   
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER       
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN   
 * THE SOFTWARE.
 */

/*
 * Senior Project - Team A
 * Distributed Medical Devices
 * Nick Moss, Aaron Neff, Matthew Smith
 */

package dist_med;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/**
 * The GUI class is used to create the GUI, initialize the server, and create
 * the queues and arrays needed to hold information. It is a multi-threaded
 * application.
 * 
 * @author Nicholas Moss
 */
public class GUI extends javax.swing.JFrame implements Runnable
{
    private DistMedServer distMedServer;
    private static Queue< DeviceData > dataQueue;
    private static ArrayList< Device > connectedDevices;
    private static ArrayList< DeviceDetailPanel > deviceDetailPanelList;
    private static ArrayList< Patient > patientList;
    private static ArrayList< PatientPanel > patientPanelList;
    private Random random;
    
    /**
     * Creates new form GUI
     */
    public GUI()
    {
        // Create the data queue and other data structures
        dataQueue = new ConcurrentLinkedQueue< >( );
        connectedDevices = new ArrayList< >( 10 );
        patientList = new ArrayList< >( 10 );
        // Create some data structures to hold the dynamically created JPanels
        deviceDetailPanelList = new ArrayList< >( 10 );
        patientPanelList = new ArrayList< >( 10 );
        // A random number generator for patient creation.
        random = new Random( );
        // Create the server and start the thread.
        distMedServer = new DistMedServer( 9999 );
        Thread serverThread = new Thread( distMedServer );
        serverThread.start();
        // Initialize the GUI.
        initComponents();
        this.setVisible( true );
        this.run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jSeparator1 = new javax.swing.JSeparator();
        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        DeviceOverviewPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceDisplayPanel = new javax.swing.JPanel();
        patientOverviewPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        closeMenu = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Distributed Medicine Client Application");
        setSize(new java.awt.Dimension(1280, 1024));

        mainPanel.setLayout(new java.awt.GridLayout(1, 0));

        jSplitPane1.setDividerLocation(700);
        jSplitPane1.setAutoscrolls(true);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(112, 102));

        DeviceOverviewPanel.addContainerListener(new java.awt.event.ContainerAdapter()
        {
            public void componentAdded(java.awt.event.ContainerEvent evt)
            {
                DeviceOverviewPanelComponentAdded(evt);
            }
        });
        DeviceOverviewPanel.setLayout(new java.awt.GridLayout(1, 0));

        this.setVisible( true );
        deviceDisplayPanel.setLayout(new java.awt.GridLayout(1, 0));

        deviceDisplayPanel.setLayout(new GridLayout( 0, 5, 3, 3 ) );

        jScrollPane1.setViewportView(deviceDisplayPanel);

        DeviceOverviewPanel.add(jScrollPane1);

        jSplitPane1.setLeftComponent(DeviceOverviewPanel);

        this.setVisible( true );
        patientOverviewPanel.setLayout(new java.awt.GridLayout());
        this.setLayout( new GridLayout( 1, 1, 1, 1 ) );
        jSplitPane1.setRightComponent(patientOverviewPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1232, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(jPanel1);

        jMenu1.setText("File");

        closeMenu.setText("Close");
        closeMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeMenuActionPerformed(evt);
            }
        });
        jMenu1.add(closeMenu);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(aboutMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Edit");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeviceOverviewPanelComponentAdded(java.awt.event.ContainerEvent evt)//GEN-FIRST:event_DeviceOverviewPanelComponentAdded
    {//GEN-HEADEREND:event_DeviceOverviewPanelComponentAdded
        System.out.println( "Device added!" );
    }//GEN-LAST:event_DeviceOverviewPanelComponentAdded

    /**
     * This function is simply used to create an about page.
     * @param evt The about menu item event.
     */
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        // This string is the about page. It is pretty terrible.
        final String aboutString = "Team members\n\nNicholas Moss\nAaron Neff\n"
            + "Matthew Smith\n\n\nProject Description\n\nDistributed "
            + "Medicine is a modular, inexpensive, and integrated way to gather"
            + " the biological data of people.\n\nWe realized that medical "
            + "instruments are quite expensive and rather difficult to get "
            + "access to. This project aims to challenge that but providing"
            + " a cheap way to get data en masse. This product can be used "
            + "in a lot of different places. It is geared towards mass "
            + "casualty areas - natural disaters, war-torn area, some corner"
            + " of the world with some epidemic, etc. However, we can see "
            + "adoption in various places like schools, warehouses, or in "
            + "construction zones.\n\n\nScope\n\nCurrently the Distributed "
            + "Medicine Suite only measures pulse and blood oxygenation."
            + "Our original plan for the product included blood pressure,"
            + "ECG, EKG, and EEG functionality. However, given the short "
            + "development time and the overall complexity of this we opted"
            + " to keep it simple. However, the code for the device (but"
            + " not necessarily the client application) is quite modular. It"
            + " shouldn't be particularily hard to integrate a few more "
            + "measurements into the fold.\n\n\nAny other information can be"
            + " found in our provided documentation.\n";

        // Create the frame, JPanel, and text area for the about page.
        JFrame aboutFrame = new JFrame( "About" );
        aboutFrame.setSize( 600, 800 );
        JPanel aboutPanel = new JPanel( );
        aboutPanel.setLayout(new BorderLayout( ) );
        JTextArea aboutArea = new JTextArea( aboutString );
        aboutArea.setWrapStyleWord( true );
        aboutArea.setEditable( false );
        aboutArea.setLineWrap( true );
        aboutPanel.add( aboutArea, BorderLayout.CENTER );
        aboutFrame.add( aboutPanel );
        aboutPanel.setVisible( true );
        aboutFrame.setVisible( true );
        // Make sure this disposes rather than closes.
        aboutFrame.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * This function is used to close the application through the menu.
     * Not currently implemented.
     * @param evt The close menu event.
     */
    private void closeMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeMenuActionPerformed
    {//GEN-HEADEREND:event_closeMenuActionPerformed
        // Todo : make this button exit the JFrame
    }//GEN-LAST:event_closeMenuActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DeviceOverviewPanel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem closeMenu;
    private static javax.swing.JPanel deviceDisplayPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel patientOverviewPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * This runnable method is used to let the GUI read from the data queue
     * and update the interface.
     */
    @Override
    public void run()
    {
        while( true )
        {
            // If there is nothing in the queue don't do anything.
            if( dataQueue.peek() != null )
            {
                // Pass in whatever result is in the dataQueue.
                this.updateInterface( dataQueue.poll( ) );
            }
            try
            {
                // Delay for a bit so the other threads can do their stuff.
                sleep(100);
            }
            catch (InterruptedException ex)
            {
                Logger.getLogger(UserInterface.class.getName()).log(
                        Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * This function is used to dynamically update all the device
     * information in the GUI.
     * 
     * @param data The data to be rendered.
     */
    public void updateInterface( DeviceData data )
    {
        // Rather redundant but this is a vestage of how the project used to
        // work. More time should have been spent planning out the GUI and the
        // entire java application.
        OverviewPanelUpdate( data );
    }
    
    /**
     * A function to update the specific data of a specific device in the 
     * OverviewPanel.
     * 
     * @param data Object containing patient measurements.
     */
    public void OverviewPanelUpdate( DeviceData data )
    {
        boolean editedData = false;
        // Just loop through the list for the element that contains the
        // serial number of the device.
        for(DeviceDetailPanel ddplElement : deviceDetailPanelList)
        {
            if( ddplElement.getDeviceID( ).equalsIgnoreCase( 
                    data.getDeviceID() ) )
            {
                ddplElement.DeviceDetailPanelUpdate( data );
                editedData = true;
            }
        }
        // If we went though the list and nothing was updated just add a new
        // DeviceDetailPanel into the fold.
        if(!editedData)
        {
            DeviceDetailPanel newPanel = new DeviceDetailPanel ( data );
            deviceDetailPanelList.add( newPanel );
            this.deviceDisplayPanel.add( newPanel );
            this.repaint();
        }
    }
    
    /**
     * This function is used to add some raw data to the queue.
     * 
     * @param data Raw JSON data.
     */
    public static void AddToQueue( DeviceData data )
    {
        dataQueue.add( data );
    }
    
    /**
     * This function is used to add a PatientPanel to the JSplitPane.
     * 
     * @param patientPanel The PatientPanel to be displayed.
     */
    public void addPatientPanel( PatientPanel patientPanel )
    {
        this.patientOverviewPanel.add( patientPanel );
        this.validate();
        this.pack();
        this.repaint();
    }
    
    /**
     * This function is used to remove a PatientPanel from the JSplitPane
     */
    public void removePatientPanel( )
    {
        // .getComponent(0) is a bad way to do this! But it works for this at
        // the moment.
        this.patientOverviewPanel.remove(
                this.patientOverviewPanel.getComponent(0));
    }
    
    /**
     * This function creates a new patient and returns its assigned ID. This
     * function is kind of a hacky solution, I feel.
     * 
     * @return The newly created PatientID.
     */
    public String createNewPatient( )
    {
        // Create the string
        String id = "";
        boolean exists = false;
        // Loop to see if the patientID is already in use. If so, make a new one
        do
        {
            id = "patient";
            Integer x = random.nextInt( 500 ) +1;
            id += x.toString( );
            // Iterate through all our patients to check for a matching ID.
            for( Patient patient : patientList )
            {
                if(patient.getPatientID().equalsIgnoreCase( id ) )
                    exists = true;
            }
            
        } while( exists );
        
        // TODO: use addPatient - if something doesnt work revert this one
        //GUI.patientList.add( new Patient( id ) );
        addPatient( new Patient( id ) );
        return id;
    }
    
    /**
     * This function is used to add a patient into the system.
     * 
     * @param patient The patient to be added.
     */
    public void addPatient( Patient patient )
    {
        GUI.patientList.add( patient );
    }
    
    /**
     * This function is used to return a Patient object.
     * 
     * @param patientID The patientID of the object desired.
     * @return A Patient Object
     */
    public Patient getPatient( String patientID )
    {
        for (Patient patient : patientList)
        {
            if(patient.getPatientID().equalsIgnoreCase( patientID ) )
                return patient;
        }
        
        // If we reach here that means there are no patients with that ID.
        return null;
    }
    
    /**
     * This function is used to remove a patient from the application.
     * 
     * @param patientID The ID of the patient we want to remove.
     */
    public void removePatient( String patientID )
    {
        for( Patient patient : patientList )
        {
            if(patient.getPatientID().equalsIgnoreCase( patientID ) )
                patientList.remove( patient );
        }
    }
    
    /**
     * This function is used to replace a Patient object with a new or modified
     * one. There are better ways to do this but this works for now.
     * 
     * @param patientUpdate A new or modified Patient object.
     */
    public void replacePatient( Patient patientUpdate )
    {
        for( Patient patient : patientList )
        {
            if(patient.getPatientID().equalsIgnoreCase( patientUpdate.getPatientID( ) ) );
                patient = patientUpdate;
        }
    }
    
    /**
     * This function is used to remove a DeviceDetailPanel.
     * 
     * @param deviceID The deviceID of the DeviceDetailPanel in question.
     */
    public void removeDevicePanel( String deviceID )
    {
       // TODO
    }
    
    /**
     * The DeviceDetailPanel class is used as a container for device specific
     * information. These panels are dynamically created.
     */
    public class DeviceDetailPanel extends javax.swing.JPanel
    {
        
        private final String deviceID;
        private final String patientID;
        /**
         * Default constructor for DeviceDetailPanel.
         * 
         * @param data The DeviceData object that contains the information we
         * want to display.
         */
        public DeviceDetailPanel( DeviceData data )
        {
            initComponents();
            this.patientID = GUI.this.createNewPatient( );
            this.deviceID = data.getDeviceID( );
            this.deviceNameLabel.setText( data.getDeviceName( ) );
            this.patientIDLabel.setText( patientID );
            this.pulseLabel.setText( data.getPulseData( ) );
            this.spo2Label.setText( data.getSPO2Data( ) + "%");
            this.setVisible( true );
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents()
        {

            mainPanel = new javax.swing.JPanel();
            jLabel1 = new javax.swing.JLabel();
            jLabel2 = new javax.swing.JLabel();
            jLabel3 = new javax.swing.JLabel();
            jLabel4 = new javax.swing.JLabel();
            deviceNameLabel = new javax.swing.JLabel();
            patientIDLabel = new javax.swing.JLabel();
            pulseLabel = new javax.swing.JLabel();
            spo2Label = new javax.swing.JLabel();
            endButton = new javax.swing.JButton();
            patientButton = new javax.swing.JButton();

            setMaximumSize(new java.awt.Dimension(175, 125));
            setMinimumSize(new java.awt.Dimension(175, 125));

            mainPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            mainPanel.setMaximumSize(new java.awt.Dimension(175, 125));
            mainPanel.setMinimumSize(new java.awt.Dimension(175, 125));

            jLabel1.setText("Device:");

            jLabel2.setText("Patient:");

            jLabel3.setText("Pulse:");

            jLabel4.setText("SPO2:");

            deviceNameLabel.setText("jLabel5");

            patientIDLabel.setText("jLabel6");

            pulseLabel.setText("jLabel7");

            spo2Label.setText("jLabel8");

            endButton.setText("End");
            endButton.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    endButtonActionPerformed(evt);
                }
            });

            patientButton.setText("Patient");
            patientButton.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    patientButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
            mainPanel.setLayout(mainPanelLayout);
            mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addComponent(endButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                            .addComponent(patientButton))
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spo2Label))
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deviceNameLabel))
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(patientIDLabel))
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pulseLabel)))
                    .addContainerGap())
            );
            mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(deviceNameLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(patientIDLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(pulseLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(spo2Label))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(endButton)
                        .addComponent(patientButton))
                    .addContainerGap())
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
        }// </editor-fold>                        

        /**
         * This function is used to handle the button event for the Patient
         * button in the DeviceDetailPanel. It creates a PatientPanel in the 
         * other JSplitPane.
         * 
         * @param evt The button press event.
         */
        private void patientButtonActionPerformed(java.awt.event.ActionEvent evt)                                              
        {                                                  
            // Iterate through all of the patientPanels created to see if one
            // matching the patientID already exists.
            for( PatientPanel patientPanel : patientPanelList )
            {
                // If the patientPanel does exist then add it and return.
                if( patientPanel.getPatientID( ).equalsIgnoreCase( patientID ) )
                {
                    GUI.this.addPatientPanel( patientPanel );
                    GUI.this.repaint( );
                    return;
                }
            }
            
            // The only time we should exit the for loop and avoid the return is
            // if the PatientPanel doesn't exist. In which case we will make a 
            // new one.
            PatientPanel patientPanel = new PatientPanel( this.patientID );
            GUI.patientPanelList.add( patientPanel );
            GUI.this.addPatientPanel( patientPanel );
            GUI.this.repaint();
        }                                             

        // TODO
        /**
         * This function is used to end a DeviceDetailPanel. Ideally it should
         * tell a client thread to close a socket but instead it just removes
         * the DeviceDetailPanel from the overview panel.
         * @param evt 
         */
        private void endButtonActionPerformed(java.awt.event.ActionEvent evt)                                          
        {                                              
            // To end the device we need to remove its DeviceDetailPanel from
            // the DeviceOverviewPanel. Then we need to repack the panel
            System.out.println( "Removing device: " + this.getName() );
            removeDevicePanel( this.getName() );
            
        }                                         


        // Variables declaration - do not modify                     
        private javax.swing.JLabel deviceNameLabel;
        private javax.swing.JButton endButton;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JPanel mainPanel;
        private javax.swing.JButton patientButton;
        private javax.swing.JLabel patientIDLabel;
        private javax.swing.JLabel pulseLabel;
        private javax.swing.JLabel spo2Label;
        // End of variables declaration                   

        /**
         * A function that retrieves the deviceID.
         * 
         * @return The deviceID.
         */
        public String getDeviceID( )
        {
            return deviceID;
        }

        /**
         * A function that updates the displayed data.
         * 
         * @param data A DeviceData object that contains the data.
         */
        public void DeviceDetailPanelUpdate( DeviceData data )
        {
            this.deviceNameLabel.setText( data.getDeviceName() );
            this.pulseLabel.setText( data.getPulseData( ) );
            this.spo2Label.setText( data.getSPO2Data( ) + "%");

            // Color code the current pulse!

            this.mainPanel.setBackground( getColorStatusCode( data ));
            this.validate();
            //this.updateUI( );
        }

        /**
         * This function is used to get a background color depending on the
         * current pulse value.
         * 
         * @param data A DeviceData object containing the pulse.
         * @return The color the background should be.
         */
        private Color getColorStatusCode( DeviceData data )
        {
            double pulse = Double.parseDouble( data.getPulseData( ) );

            if( isBetween( pulse, 45, 100 ) )
                return Color.WHITE;
            if( isBetween( pulse, 20, 44 ) )
                return Color.RED;
            if( isBetween( pulse, 0, 19 ) )
                return Color.BLACK;

            return Color.WHITE;
        }

        /**
         * This function is used to see if an int is in a range of values.
         * 
         * @param input The number to check.
         * @param lower The lower bound of the range.
         * @param upper The upper bound of the range.
         * @return True if in the range.
         */
        private boolean isBetween( double input,
                double lower, double upper )
        {
            return ((input >= lower) && (input <= upper));
        }
    } // End of DeviceDetail
    
    public class PatientPanel extends javax.swing.JPanel
    {
        private String patientID;
        /**
         * Creates new form PatientPanel
         * 
         * @param patientID The patientID representing the patient.
         */
        public PatientPanel( String patientID )
        {
            System.out.println( "PatientID: " + patientID );
            this.patientID = patientID;
            initComponents();
            this.patientIDField.setText( patientID );
            this.setVisible( true );
            this.validate();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
       @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
        private void initComponents()
        {

            jPanel1 = new javax.swing.JPanel();
            jLabel7 = new javax.swing.JLabel();
            jScrollPane5 = new javax.swing.JScrollPane();
            mainPanel = new javax.swing.JPanel();
            jLabel1 = new javax.swing.JLabel();
            jLabel2 = new javax.swing.JLabel();
            jLabel3 = new javax.swing.JLabel();
            jLabel4 = new javax.swing.JLabel();
            patientIDField = new javax.swing.JTextField();
            firstNamefield = new javax.swing.JTextField();
            ageField = new javax.swing.JTextField();
            statusField = new javax.swing.JTextField();
            jLabel5 = new javax.swing.JLabel();
            lastNameField = new javax.swing.JTextField();
            jSeparator1 = new javax.swing.JSeparator();
            jLabel6 = new javax.swing.JLabel();
            jScrollPane1 = new javax.swing.JScrollPane();
            symptomsTextArea = new javax.swing.JTextArea();
            jLabel8 = new javax.swing.JLabel();
            jScrollPane2 = new javax.swing.JScrollPane();
            diagnosisTextArea = new javax.swing.JTextArea();
            jLabel9 = new javax.swing.JLabel();
            jScrollPane3 = new javax.swing.JScrollPane();
            prognosisTextArea = new javax.swing.JTextArea();
            jLabel10 = new javax.swing.JLabel();
            jScrollPane4 = new javax.swing.JScrollPane();
            notesTextArea = new javax.swing.JTextArea();
            saveButton = new javax.swing.JButton();
            closeButton = new javax.swing.JButton();

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 100, Short.MAX_VALUE)
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 100, Short.MAX_VALUE)
            );

            jLabel7.setText("jLabel7");

            jLabel1.setText("PatientID:");

            jLabel2.setText("First Name:");

            jLabel3.setText("Age:");

            jLabel4.setText("Status:");

            patientIDField.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    patientIDFieldActionPerformed(evt);
                }
            });

            jLabel5.setText("Last Name:");

            jLabel6.setText("Symptoms");

            symptomsTextArea.setColumns(20);
            symptomsTextArea.setLineWrap(true);
            symptomsTextArea.setRows(5);
            symptomsTextArea.setTabSize(4);
            symptomsTextArea.setWrapStyleWord(true);
            jScrollPane1.setViewportView(symptomsTextArea);

            jLabel8.setText("Diagnosis");

            diagnosisTextArea.setColumns(20);
            diagnosisTextArea.setLineWrap(true);
            diagnosisTextArea.setRows(5);
            diagnosisTextArea.setTabSize(4);
            diagnosisTextArea.setWrapStyleWord(true);
            jScrollPane2.setViewportView(diagnosisTextArea);

            jLabel9.setText("Prognosis");

            prognosisTextArea.setColumns(20);
            prognosisTextArea.setLineWrap(true);
            prognosisTextArea.setRows(5);
            prognosisTextArea.setTabSize(4);
            prognosisTextArea.setWrapStyleWord(true);
            jScrollPane3.setViewportView(prognosisTextArea);

            jLabel10.setText("Notes");

            notesTextArea.setColumns(20);
            notesTextArea.setLineWrap(true);
            notesTextArea.setRows(5);
            notesTextArea.setTabSize(4);
            notesTextArea.setWrapStyleWord(true);
            jScrollPane4.setViewportView(notesTextArea);

            saveButton.setText("Save");
            saveButton.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    saveButtonActionPerformed(evt);
                }
            });

            closeButton.setText("Close");
            closeButton.setMaximumSize(new java.awt.Dimension(62, 24));
            closeButton.setMinimumSize(new java.awt.Dimension(62, 24));
            closeButton.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    closeButtonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
            mainPanel.setLayout(mainPanelLayout);
            mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane4)
                        .addComponent(jScrollPane3)
                        .addComponent(jScrollPane2)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(patientIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                            .addComponent(firstNamefield, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(0, 4, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(patientIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(firstNamefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveButton))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel6)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel8)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel9)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel10)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            jScrollPane5.setViewportView(mainPanel);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
            );
        }// </editor-fold>                       

        private void patientIDFieldActionPerformed(java.awt.event.ActionEvent evt)                                               
        {                                                   
            // TODO add your handling code here:
        }                                              

        /**
         * This function handles the save button event. It technically does not
         * actually save. The scope of the project does not include file I/O
         *  functionality. It does, however, modify a patient in the array list 
         * and saves the updated information there. 
         * 
         * @param evt The save button action event.
         */
        private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)                                           
        {                                
            System.out.println( "Saving patient..");
            Patient pa = new Patient( ); //GUI.this.getPatient( this.getPatientID( ) );
            
            // Set the fields of the patient.
            pa.setAge( (int)(Integer.parseInt( this.ageField.getText( ) )) );
            pa.setFirstName( this.firstNamefield.getText( ) );
            pa.setLastName( this.lastNameField.getText( ) );
            pa.setStatus( this.statusField.getText( ) );
            pa.setSymptoms( this.symptomsTextArea.getText( ) );
            pa.setDiagnosis( this.diagnosisTextArea.getText( ) );
            pa.setPrognosis( this.prognosisTextArea.getText( ) );
            pa.setNotes( this.notesTextArea.getText( ) );
            
            //GUI.this.replacePatient( pa );
            GUI.this.addPatient( pa );
            System.out.println( "Saved!" );
            
        }                                          

        /**
         * This function handles the close button event from the patient panel.
         * It is used to simply remove the patient panel from being displayed.
         * 
         * @param evt The close button action event.
         */
        private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)                                            
        {                                                
            GUI.this.removePatientPanel();
            GUI.this.repaint();
        }                                           


        // Variables declaration - do not modify                     
        private javax.swing.JTextField ageField;
        private javax.swing.JButton closeButton;
        private javax.swing.JTextArea diagnosisTextArea;
        private javax.swing.JTextField firstNamefield;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel10;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JLabel jLabel5;
        private javax.swing.JLabel jLabel6;
        private javax.swing.JLabel jLabel7;
        private javax.swing.JLabel jLabel8;
        private javax.swing.JLabel jLabel9;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JScrollPane jScrollPane4;
        private javax.swing.JScrollPane jScrollPane5;
        private javax.swing.JSeparator jSeparator1;
        private javax.swing.JTextField lastNameField;
        private javax.swing.JPanel mainPanel;
        private javax.swing.JTextArea notesTextArea;
        private javax.swing.JTextField patientIDField;
        private javax.swing.JTextArea prognosisTextArea;
        private javax.swing.JButton saveButton;
        private javax.swing.JTextField statusField;
        private javax.swing.JTextArea symptomsTextArea;
        // End of variables declaration                   
        
        /**
         * This function is used to simply get a patientID from the patient
         *  panel. It is used for search and modify operations. 
         * 
         * @return A string representing the ID of the patient and the ID of 
         * the PatientPanel.
         */
        public String getPatientID( )
        {
            return patientID;
        }
    }

}
